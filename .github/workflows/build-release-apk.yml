name: Build & Release APK

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags (e.g., v1.0.0)
    branches:
      - master
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Set up JDK for Android build
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Manual Flutter setup instead of using the action
      - name: Set up Flutter Manually
        run: |
          git clone https://github.com/flutter/flutter.git --depth 1 -b stable $HOME/flutter
          echo "$HOME/flutter/bin" >> $GITHUB_PATH
          export PATH="$PATH:$HOME/flutter/bin"
          flutter config --no-analytics
          flutter precache
          flutter --version
          flutter doctor -v

      - name: Accept Android licenses
        run: yes | flutter doctor --android-licenses || true

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create false
          poetry install --no-interaction
          pip install flet[build]==0.27.6
          
          # Verify flet installation
          which flet
          flet --version

      - name: Extract Version from Tag
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +'%Y%m%d%H%M%S')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build APK
        run: |
          # List the source directory to verify files are there
          echo "Source directory contents:"
          ls -la ./src/
          
          # Build the APK with verbose output
          flet build apk 
          
          # Debug output to verify APK was created
          echo "Searching for APK files:"
          find . -name "*.apk" -type f -exec ls -la {} \;

      - name: Create Deployment Directory
        run: |
          mkdir -p deployment
          # Find all APK files and copy them to deployment directory
          find . -name "*.apk" -exec cp {} deployment/ \;
          echo "Files in deployment directory:"
          ls -la deployment/
          
          # If no APKs found, check standard locations
          if [ ! "$(ls -A deployment/)" ]; then
            echo "No APKs found through search, checking standard locations"
            cp -f build/android/app/build/outputs/apk/release/*.apk deployment/ 2>/dev/null || true
            cp -f build/apk/*.apk deployment/ 2>/dev/null || true
            ls -la deployment/
          fi

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: logistics-app-${{ steps.get_version.outputs.version }}
          path: deployment/*.apk
          if-no-files-found: warn  # Changed to warn so workflow continues even if APK not found
          retention-days: 30

      - name: Generate Release Notes
        id: release_notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "## Logistics App v${{ steps.get_version.outputs.version }}" > RELEASE_NOTES.md
          echo "Released on $(date +'%Y-%m-%d')" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Changes" >> RELEASE_NOTES.md
          
          # Get previous tag to compare changes
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            git log $PREV_TAG..HEAD --pretty=format:"- %s" >> RELEASE_NOTES.md
          else
            git log --pretty=format:"- %s" >> RELEASE_NOTES.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Logistics v${{ steps.get_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: deployment/*.apk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
